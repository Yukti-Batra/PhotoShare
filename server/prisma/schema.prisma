// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String?   // Optional for Firebase users
  name          String
  bio           String?
  profileImage  String?
  firebaseUid   String?   @unique // Firebase User ID for Google auth
  isActive      Boolean   @default(true) // Account status
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followedBy    Follow[]  @relation("following")
  following     Follow[]  @relation("follower")
}

// Post model
model Post {
  id            String    @id @default(uuid())
  imageUrl      String
  caption       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]

  @@index([userId])
}

// Like model
model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Comment model
model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

// Follow model
model Follow {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())

  // Relations
  followerId    String
  follower      User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId   String
  following     User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
